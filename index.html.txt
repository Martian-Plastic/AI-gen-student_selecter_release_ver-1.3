<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student & Group Selector</title>
    <style>
        body {
            margin: 0;
            height: 100vh;
            display: flex;
            background: linear-gradient(135deg, #006633, #ff6600);
            font-family: "Segoe UI", sans-serif;
            color: #222;
            overflow: hidden;
        }
        .container {
            width: 70%;
            background: #fff;
            padding: 30px;
            border-radius: 20px 0 0 20px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.25);
            position: relative;
            overflow-y: auto;
        }
        .result-panel {
            width: 30%;
            background: #f8f9fa;
            padding: 30px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            border-radius: 0 20px 20px 0;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
                    font-size: 16px; /* Set your desired text size here */
        }
        .header, .university, h1.course-title, h2 {
            /* [Previous header styles remain the same] */
        }
        .lang-btn {
            /* [Previous button styles remain the same] */
        }
        .settings-box {
            border: 2px solid #ddd;
            border-radius: 12px;
            padding: 15px;
            margin: 20px 0;
            background: #f9f9f9;
        }
        .settings-title {
            font-weight: bold;
            font-size: 1.1rem;
            margin-bottom: 10px;
            color: #006633;
        }
        .mode-selector {
            display: flex;
            justify-content: center;
            margin-bottom: 15px;
        }
        .mode-btn {
            padding: 10px 20px;
            margin: 0 5px;
            background: #e0e0e0;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s;
        }
        .mode-btn.active {
            background: #ff6600;
            color: white;
        }
        .inputs {
            display: flex;
            gap: 20px;
            justify-content: center;
            flex-wrap: wrap;
        }
        .input-group {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        label {
            font-weight: bold;
            margin-bottom: 5px;
            color: #333;
        }
        input {
            padding: 10px;
            border-radius: 8px;
            border: 1px solid #aaa;
            font-size: 1rem;
            width: 140px;
            text-align: center;
        }
        .result {
            font-size: 3.5rem;
            font-weight: bold;
            color: #e60000;
            text-align: center;
            padding: 30px;
            margin: 20px 0;
            min-height: 200px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: white;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            width: 90%;
            transition: all 0.3s ease;
            word-break: break-word;
        }
        .shaking, .highlight {
            /* [Previous animation styles remain the same] */
        }
        button.draw-btn {
            background: #ff6600;
            color: #fff;
            border: none;
            padding: 15px 30px;
            font-size: 1.2rem;
            font-weight: bold;
            border-radius: 50px;
            cursor: pointer;
            transition: transform 0.2s, background 0.3s;
        }
        .student-list {
            /* [Previous table styles remain the same] */
        }
        .toggle-container {
            margin: 15px 0;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }
        .toggle-switch {
            /* [Previous toggle styles remain the same] */
        }
        .instructions {
            background-color: #f8f9fa;
            border-left: 4px solid #006633;
            padding: 15px;
            margin: 15px 0;
            text-align: left;
        }
        .confetti {
            /* [Previous confetti styles remain the same] */
        }
        .credit-box {
            margin-top: 30px;
            padding: 15px;
            background-color: #f0f0f0;
            border-radius: 10px;
            font-size: 0.8rem;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="container">
        <button class="lang-btn" onclick="toggleLanguage()">中文</button>
        
        <div class="header">
            <div class="university" id="university">Lui Ming Choi Lutheran College</div>
        </div>

        <h1 class="course-title" id="course-title">Chemistry Class</h1>
        <h2 id="selector-title">🎯 Student & Group Selector 🎯</h2>
        
        <div class="settings-box">
            <div class="settings-title" id="classroom-title">Settings</div>
            
            <div class="mode-selector">
                <button class="mode-btn active" id="studentModeBtn" onclick="setMode('student')">Student Mode</button>
                <button class="mode-btn" id="groupModeBtn" onclick="setMode('group')">Group Mode</button>
            </div>
            
            <div class="student-settings" id="studentSettings">
                <div class="instructions">
                    <h3 id="instructions-title">How to prepare your student list:</h3>
                    <ol id="instructions-list">
                        <li>Create an Excel file with these columns: <strong>Form, Class, Class Number, Student Name</strong></li>
                        <li>Example row: <code>S4, 4A, 01, Chan Tai Man</code></li>
                        <li>Save as either .xlsx or .csv format</li>
                    </ol>
                </div>
                
                <div class="file-input">
                    <input type="file" id="studentFile" accept=".csv, .xlsx, .xls">
                    <button class="draw-btn" onclick="importStudents()" style="padding: 10px 20px; font-size: 1rem;">Import Student List</button>
                </div>
                
                <div class="class-filter" id="classFilter" style="display: none; margin-top: 15px;">
                    <label for="classSelect" id="filterLabel">Filter by Class:</label>
                    <select id="classSelect" onchange="filterStudents()"></select>
                </div>
                
                <div class="toggle-container">
                    <span class="toggle-label" id="excludeLabel">Exclude selected students:</span>
                    <label class="toggle-switch">
                        <input type="checkbox" id="excludeToggle">
                        <span class="slider"></span>
                    </label>
                </div>
                
                <button class="draw-btn" onclick="toggleStudentList()" style="padding: 10px 20px; font-size: 1rem;">Show/Hide Student List</button>
            </div>
            
            <div class="group-settings" id="groupSettings" style="display: none;">
                <div class="inputs">
                    <div class="input-group">
                        <label for="totalGroups">Total Groups:</label>
                        <input type="number" id="totalGroups" min="1" value="6" oninput="checkGroupFields()">
                    </div>
                    <div class="input-group">
                        <label for="groupsToPick">Groups to Pick:</label>
                        <input type="number" id="groupsToPick" min="1" value="1" oninput="checkGroupFields()">
                    </div>
                </div>
                
                <div class="toggle-container">
                    <span class="toggle-label" id="excludeGroupsLabel">Exclude selected groups:</span>
                    <label class="toggle-switch">
                        <input type="checkbox" id="excludeGroupsToggle">
                        <span class="slider"></span>
                    </label>
                </div>
            </div>
        </div>

        <button class="draw-btn" onclick="draw()" id="draw-btn" disabled>Select</button>
        
        <table class="student-list" id="studentListTable">
            <thead>
                <tr>
                    <th>Form</th>
                    <th>Class</th>
                    <th>No.</th>
                    <th>Student Name</th>
                    <th>Selected</th>
                </tr>
            </thead>
            <tbody id="studentListBody"></tbody>
        </table>
        
        <div class="credit-box">
            <p><strong>Creadted by: Kwan Hiu Ping, Plastic :)</strong></p>
            <p>Acknowledgement:</p>
            <p>This tool is modified by EdUHK Gen AI (deepseek-v3-0324)</p>
            <p>Special thanks to Richard Yeung C.Y. for providing the original html code</p>
        </div>
    </div>

    <div class="result-panel">
        <div class="result" id="result">Ready to select!</div>
    </div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
<script>
let currentLang = "en";
let allStudents = [];
let filteredStudents = [];
let selectedStudents = [];
let selectedGroups = [];
let excludeSelected = false;
let excludeGroupsSelected = false;
let currentMode = "student";

const translations = {
    en: {
        university: "Lui Ming Choi Lutheran College",
        course: "Chemistry Class",
        selector: "🎯 Student & Group Selector 🎯",
        start: "Ready to select!",
        button: "Select",
        footer: "Randomly selecting for class discussion",
        classTitle: "Settings",
        langBtn: "中文",
        alert: "Please import a student list first!",
        importSuccess: "Student list imported successfully!",
        instructionsTitle: "How to prepare your student list:",
        instructions: [
            "Create an Excel file with these columns: Form, Class, Class Number, Student Name",
            "Example row: S4, 4A, 01, Chan Tai Man",
            "Save as either .xlsx or .csv format"
        ],
        filterLabel: "Filter by Class:",
        excludeLabel: "Exclude selected students:",
        excludeGroupsLabel: "Exclude selected groups:",
        studentMode: "Student Mode",
        groupMode: "Group Mode",
        fileError: "Error: File must contain Form, Class, Number, and Name columns",
        allSelected: "All students have been selected!",
        allGroupsSelected: "All groups have been selected!",
        groupResult: "Selected Group: "
    },
    zh: {
        university: "路德會呂明才中學",
        course: "化學課",
        selector: "🎯 學生及小組抽籤器 🎯",
        start: "準備抽籤！",
        button: "抽籤",
        footer: "隨機抽選課堂討論",
        classTitle: "設定",
        langBtn: "English",
        alert: "請先導入學生名單！",
        importSuccess: "學生名單導入成功！",
        instructionsTitle: "如何準備學生名單:",
        instructions: [
            "創建一個包含以下列的Excel文件: 年級, 班別, 學號, 學生姓名",
            "示例行: 中四, 4A, 01, 陳大文",
            "保存為.xlsx或.csv格式"
        ],
        filterLabel: "按班別篩選:",
        excludeLabel: "排除已選學生:",
        excludeGroupsLabel: "排除已選小組:",
        studentMode: "學生模式",
        groupMode: "小組模式",
        fileError: "錯誤: 文件必須包含年級、班別、學號和學生姓名列",
        allSelected: "所有學生已被選中！",
        allGroupsSelected: "所有小組已被選中！",
        groupResult: "選中組別: "
    }
};

function setMode(mode) {
    currentMode = mode;
    document.getElementById('studentModeBtn').classList.toggle('active', mode === 'student');
    document.getElementById('groupModeBtn').classList.toggle('active', mode === 'group');
    document.getElementById('studentSettings').style.display = mode === 'student' ? 'block' : 'none';
    document.getElementById('groupSettings').style.display = mode === 'group' ? 'block' : 'none';
    document.getElementById('draw-btn').disabled = mode === 'student' ? allStudents.length === 0 : false;
    document.getElementById('result').textContent = translations[currentLang].start;
}

function toggleLanguage() {
    currentLang = currentLang === "en" ? "zh" : "en";
    const t = translations[currentLang];
    
    document.getElementById("university").textContent = t.university;
    document.getElementById("course-title").textContent = t.course;
    document.getElementById("selector-title").textContent = t.selector;
    document.getElementById("result").textContent = t.start;
    document.getElementById("draw-btn").textContent = t.button;
    document.getElementById("footer").textContent = t.footer;
    document.querySelector(".lang-btn").textContent = t.langBtn;
    document.getElementById("classroom-title").textContent = t.classTitle;
    
    document.getElementById("instructions-title").textContent = t.instructionsTitle;
    const instructions = t.instructions;
    const instructionItems = document.querySelectorAll("#instructions-list li");
    instructionItems.forEach((item, index) => {
        if (instructions[index]) {
            item.innerHTML = instructions[index];
        }
    });
    
    document.getElementById("filterLabel").textContent = t.filterLabel;
    document.getElementById("excludeLabel").textContent = t.excludeLabel;
    document.getElementById("excludeGroupsLabel").textContent = t.excludeGroupsLabel;
    document.getElementById("studentModeBtn").textContent = t.studentMode;
    document.getElementById("groupModeBtn").textContent = t.groupMode;
}

function importStudents() {
    const fileInput = document.getElementById('studentFile');
    const file = fileInput.files[0];
    
    if (!file) {
        alert(translations[currentLang].alert);
        return;
    }
    
    const reader = new FileReader();
    
    reader.onload = function(e) {
        try {
            const data = new Uint8Array(e.target.result);
            const workbook = XLSX.read(data, { type: 'array' });
            const firstSheet = workbook.Sheets[workbook.SheetNames[0]];
            const jsonData = XLSX.utils.sheet_to_json(firstSheet, { header: 1 });
            
            // Find column indexes
            const headers = jsonData[0].map(h => h.toString().toLowerCase());
            const formIndex = headers.findIndex(h => h.includes('form'));
            const classIndex = headers.findIndex(h => h.includes('class') && !h.includes('number'));
            const numberIndex = headers.findIndex(h => h.includes('number') || h.includes('no') || h.includes('num'));
            const nameIndex = headers.findIndex(h => h.includes('name'));
            
            if (formIndex === -1 || classIndex === -1 || numberIndex === -1 || nameIndex === -1) {
                throw new Error(translations[currentLang].fileError);
            }
            
            // Process data
            allStudents = jsonData.slice(1).map(row => ({
                form: (row[formIndex] || '').toString().trim().toUpperCase(),
                class: (row[classIndex] || '').toString().trim().toUpperCase(),
                number: row[numberIndex] ? row[numberIndex].toString().trim().padStart(2, '0') : '',
                name: (row[nameIndex] || '').toString().trim()
            })).filter(student => student.name !== '');
            
            if (allStudents.length === 0) {
                throw new Error("No valid student data found.");
            }
            
            selectedStudents = [];
            document.getElementById("classFilter").style.display = "block";
            updateClassFilter();
            filterStudents();
            document.getElementById("draw-btn").disabled = false;
            alert(translations[currentLang].importSuccess);
        } catch (error) {
            alert(error.message);
            console.error(error);
        }
    };
    
    reader.onerror = function() {
        alert("Error reading file. Please try again.");
    };
    
    reader.readAsArrayBuffer(file);
}

function updateClassFilter() {
    const classSelect = document.getElementById("classSelect");
    classSelect.innerHTML = '';
    
    // Get unique classes
    const classes = [...new Set(allStudents.map(student => student.class))];
    
    // Add class options
    classes.forEach(cls => {
        if (cls) {
            const option = document.createElement("option");
            option.value = cls;
            option.textContent = cls;
            classSelect.appendChild(option);
        }
    });
}

function filterStudents() {
    const classSelect = document.getElementById("classSelect");
    const selectedClass = classSelect.value;
    
    if (selectedClass) {
        filteredStudents = allStudents.filter(student => student.class === selectedClass);
    } else {
        filteredStudents = [...allStudents];
    }
    
    updateStudentList();
}

function updateStudentList() {
    const tableBody = document.getElementById('studentListBody');
    tableBody.innerHTML = '';
    
    filteredStudents.forEach((student, index) => {
        const row = document.createElement('tr');
        
        const isSelected = selectedStudents.some(
            s => s.form === student.form && 
                 s.class === student.class && 
                 s.number === student.number && 
                 s.name === student.name
        );
        
        row.innerHTML = `
            <td>${student.form}</td>
            <td>${student.class}</td>
            <td>${student.number}</td>
            <td>${student.name}</td>
            <td>${isSelected ? '✓' : ''}</td>
        `;
        
        if (isSelected) {
            row.style.backgroundColor = '#ffdddd';
        }
        
        tableBody.appendChild(row);
    });
}

function toggleStudentList() {
    const table = document.getElementById('studentListTable');
    table.style.display = table.style.display === 'none' ? 'table' : 'none';
}

function checkGroupFields() {
    const totalGroups = parseInt(document.getElementById('totalGroups').value);
    const groupsToPick = parseInt(document.getElementById('groupsToPick').value);
    
    if (groupsToPick > totalGroups) {
        document.getElementById('groupsToPick').value = totalGroups;
    }
}

function draw() {
    const resultDiv = document.getElementById("result");
    
    if (currentMode === "student") {
        drawStudent();
    } else {
        drawGroup();
    }
}

function drawStudent() {
    if (filteredStudents.length === 0) {
        alert(translations[currentLang].alert);
        return;
    }

    excludeSelected = document.getElementById('excludeToggle').checked;
    
    let availableStudents;
    if (excludeSelected) {
        availableStudents = filteredStudents.filter(student => 
            !selectedStudents.some(
                s => s.form === student.form && 
                     s.class === student.class && 
                     s.number === student.number && 
                     s.name === student.name
            )
        );
        
        if (availableStudents.length === 0) {
            document.getElementById('result').textContent = translations[currentLang].allSelected;
            return;
        }
    } else {
        availableStudents = [...filteredStudents];
    }
    
    const resultDiv = document.getElementById("result");
    resultDiv.classList.add("shaking");

    let interval;
    let counter = 0;
    const duration = 30;

    interval = setInterval(() => {
        const randomIndex = Math.floor(Math.random() * availableStudents.length);
        const student = availableStudents[randomIndex];
        resultDiv.textContent = `${student.class} ${student.number} ${student.name}`;
        counter++;
        if (counter > duration) {
            clearInterval(interval);
            resultDiv.classList.remove("shaking");

            const finalIndex = Math.floor(Math.random() * availableStudents.length);
            const selectedStudent = availableStudents[finalIndex];
            resultDiv.innerHTML = `✅<br> ${selectedStudent.class}${selectedStudent.number}<br>${selectedStudent.name}`;
            resultDiv.classList.add("highlight");
            setTimeout(() => resultDiv.classList.remove("highlight"), 1000);
            
            if (!selectedStudents.some(
                s => s.form === selectedStudent.form && 
                     s.class === selectedStudent.class && 
                     s.number === selectedStudent.number && 
                     s.name === selectedStudent.name
            )) {
                selectedStudents.push(selectedStudent);
                updateStudentList();
            }
            
            launchConfetti();
        }
    }, 100);
}

function drawGroup() {
    const totalGroups = parseInt(document.getElementById('totalGroups').value) || 6;
    const groupsToPick = parseInt(document.getElementById('groupsToPick').value) || 1;
    excludeGroupsSelected = document.getElementById('excludeGroupsToggle').checked;
    
    let availableGroups = Array.from({length: totalGroups}, (_, i) => i + 1);
    
    if (excludeGroupsSelected) {
        availableGroups = availableGroups.filter(group => !selectedGroups.includes(group));
        
        if (availableGroups.length === 0) {
            document.getElementById('result').textContent = translations[currentLang].allGroupsSelected;
            return;
        }
    }
    
    const resultDiv = document.getElementById("result");
    resultDiv.classList.add("shaking");

    let interval;
    let counter = 0;
    const duration = 30;

    interval = setInterval(() => {
        const randomIndex = Math.floor(Math.random() * availableGroups.length);
        const group = availableGroups[randomIndex];
        resultDiv.textContent = `${translations[currentLang].groupResult} ${group}`;
        counter++;
        if (counter > duration) {
            clearInterval(interval);
            resultDiv.classList.remove("shaking");

            const finalIndex = Math.floor(Math.random() * availableGroups.length);
            const selectedGroup = availableGroups[finalIndex];
            resultDiv.innerHTML = `✅<br><strong>${translations[currentLang].groupResult} ${selectedGroup}</strong>`;
            resultDiv.classList.add("highlight");
            setTimeout(() => resultDiv.classList.remove("highlight"), 1000);
            
            if (!selectedGroups.includes(selectedGroup)) {
                selectedGroups.push(selectedGroup);
            }
            
            launchConfetti();
        }
    }, 100);
}

function launchConfetti() {
    for (let i = 0; i < 30; i++) {
        const confetti = document.createElement("div");
        confetti.classList.add("confetti");
        confetti.style.left = Math.random() * window.innerWidth + "px";
        confetti.style.backgroundColor = `hsl(${Math.random() * 360}, 100%, 50%)`;
        confetti.style.animationDuration = (Math.random() * 2 + 2) + "s";
        document.body.appendChild(confetti);
        setTimeout(() => confetti.remove(), 3000);
    }
}

// Initialize
setMode('student');
</script>
</body>
</html>